#include<iostream>
#include<vector>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<queue>

using namespace std;

int dfs(char str[], vector<int> pos[])
{
	int done[10] = {0}, visited[100100] = {0};
	int what = strlen(str) - 1;
	queue<int> q;
	int level = 0;
	int num, tmp;
	int size;
	q.push(0);
	q.push(-1);
	while(q.size() > 1)
	{
		num = q.front();
		q.pop();
		if(num==-1)
		{
			level++;
			q.push(-1);
		}
		else if(num==what)
			break;
		else
		{
			tmp = str[num];
			if(done[tmp] == 0)
			{
				size = pos[tmp].size();
				for(int i=0; i<size; i++)
					if(!visited[pos[tmp][i]])
					{
						q.push(pos[tmp][i]);
						visited[pos[tmp][i]] = 1;
					}
				done[tmp] = 0;
			}
			tmp = num - str[num-1];
			if(num>0 && tmp>=0 && !visited[tmp])
			{
				q.push(tmp);
				visited[tmp] = 1;
			}
			tmp = num + str[num+1];
			if(num<what && tmp<=what && !visited[tmp])
			{
				q.push(tmp);
				visited[tmp] = 1;
			}
		}
	}

	return level;
}		

int main()
{
	char str[100100];		//USE BFS
	scanf("%s", str);
	vector<int> pos[10];
	for(int i=0; str[i]; i++)
	{
		str[i]-='0';
		pos[str[i]].push_back(i);
	}
	printf("%d\n", dfs(str, pos));
	return 0;
}
